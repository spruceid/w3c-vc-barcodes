use ssi::dids::{AnyDidMethod, DIDResolver};
use w3c_vc_barcodes::{
    optical_barcode_credential::{decode_from_bytes, MachineReadableZone, VerificationParameters},
    verify,
};

const OPTICAL_DATA: &[u8] = b"TEST_OPTICAL_DATA" as &[u8];
const INPUT_HEX: &str = "d90501a50181782468747470733a2f2f7777772e77332e6f72672f6e732f63726564656e7469616c732f7632189d81187618a6a1189c8202783e7777772e77332e6f72672f6e732f63726564656e7469616c732f6973737565722d646570656e64656e74234d616368696e655265616461626c655a6f6e6518aa8201726578616d706c652e6f72672f69737375657218aca6189c186c18bc821a668ff7ef19022b18be6d65636473612d78692d3230323318c818ce18ca58417ab4cc17310215175b1c2b9a585d2f9dd6dcb038516bcd2ab1255a641f898c0f5e7fc0fd66601e92c81940b73d38395651f9d89f687c15851c0137713988b47a2418cc78b26469643a6a776b3a65794a6a636e59694f694a514c5449314e694973496d743065534936496b56444969776965434936496a6b3164336c6164306f7759585658654668784c55644a53444e7454554e436146704a52574a48613277775432747059323544616a564a524655694c434a35496a6f6961486c79626c463461446451576e5669614570755456397252304e524f584a45644641356448526c5a6b7856615539574f475679516c413356534a392330";

#[async_std::main]
async fn main() {
    let input = hex::decode(INPUT_HEX).unwrap();
    let vc = decode_from_bytes::<MachineReadableZone>(&input)
        .await
        .unwrap();

    let params = VerificationParameters::new(AnyDidMethod::default().into_vm_resolver());

    let result = verify(&vc, OPTICAL_DATA, params).await.unwrap();

    assert!(result.is_ok());
}
